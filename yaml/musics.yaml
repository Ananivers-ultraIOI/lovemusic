---
openapi: 3.0.0
info:
  title: LoveMusic Category
  description: |
    This is category request sample for LoveMusic API
  termsOfService: http://swagger.io/terms/
  contact:
    email: kouptchinskya@proton.me
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://virtserver.swaggerhub.com/KOUPTCHINSKYNG/test/1.0.1
    description: SwaggerHub API Auto Mocking
  - url: https://petstore.swagger.io/v2
tags:
  - name: musics
    description: Operations about music
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /musics:
    get:
      tags:
        - musics
      summary: Get all musics
      operationId: getAllMusics
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Music'
    post:
      tags:
        - musics
      summary: Add a music to the store
      operationId: addMusics
      requestBody:
        $ref: '#/components/requestBodies/MusicForCreation'
      responses:
        "200":
          description: music added
        "405":
          description: Invalid input
  /musics/{musicId}:
    get:
      tags:
        - musics
      summary: Find music by ID
      description: Returns a single music
      operationId: getMusicById
      parameters:
        - name: musicId
          in: path
          description: ID of music to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Music'
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
    delete:
      tags:
        - musics
      summary: Delete a music
      operationId: deleteMusic
      parameters:
        - name: musicId
          in: path
          description: Music id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid ID supplied
        "404":
          description: Music not found
  /categories/musics/{categoryId}:
    get:
      tags:
        - musics
      summary: Find music by category ID
      description: Returns a single music
      operationId: getMusicByIdCategory
      parameters:
        - name: categoryIdId
          in: path
          description: ID of category to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Music'
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
components:
  schemas:
    Music:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Hold the line
        artist:
          type: string
          example: Toto
        album:
          type: string
          example: Toto
        categoriesId:
          type: integer
          format: int64
          example: 1
    MusicForCreation:
      type: object
      properties:
        title:
          type: string
          example: Hold the line
        artist:
          type: string
          example: Toto
        album:
          type: string
          example: Toto
        categoriesId:
          type: integer
          format: int64
          example: 1
  requestBodies:
    MusicForCreation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MusicForCreation'